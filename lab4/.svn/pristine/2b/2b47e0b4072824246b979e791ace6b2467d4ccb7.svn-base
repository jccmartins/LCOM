#include "mouse.h"
#include "mouse_states.h"

static int mouse_hook_id = 2;
struct packet pp;
int size = 0;

int(mouse_subscribe_int)(uint8_t *bit_no)
{

  *bit_no = mouse_hook_id;

  if (sys_irqsetpolicy(MOUSE_IRQ, IRQ_REENABLE | IRQ_EXCLUSIVE, &mouse_hook_id) != 0)
  {
    return 1;
  }

  return 0;
}

int(mouse_unsubscribe_int)()
{
  if (sys_irqrmpolicy(&mouse_hook_id) != 0)
  {
    return 1;
  }

  return 0;
}

void(mouse_ih)()
{
  uint8_t st;

  util_sys_inb(STAT_REG, &st);
  if ((st & (PARITY_ERROR | TIMEOUT_ERROR)) == 0)
  {
    if ((st & (AUX | OBF)) == (BIT(5) | BIT(0)))
    { //if output buffer is full and data is from mouse
      util_sys_inb(OUT_BUF, &pp.bytes[size]);
      if ((pp.bytes[0] & BIT(3)) == BIT(3))
      {
        ++size;
      }
    }
  }
}

void(packet_parser)(struct packet *pp)
{
  int delta_x_sign, delta_y_sign;

  pp->lb = pp->bytes[0] & BIT(0);
  pp->rb = (pp->bytes[0] & BIT(1)) >> 1;
  pp->mb = (pp->bytes[0] & BIT(2)) >> 2;
  delta_x_sign = (pp->bytes[0] & BIT(4)) >> 4;
  delta_y_sign = (pp->bytes[0] & BIT(5)) >> 5;
  pp->x_ov = (pp->bytes[0] & BIT(6)) >> 6;
  pp->y_ov = (pp->bytes[0] & BIT(7)) >> 7;

  if (delta_x_sign)
  {
    int16_t doublebyte = pp->bytes[1] | BIT(8);
    //left-shift para colocar o sign bit no bit 15, dividir por 128 (2^7) para recuparar o valor mantendo o sinal
    pp->delta_x = (int16_t)(doublebyte << 7) / 128;
  }
  else
  {
    pp->delta_x = pp->bytes[1];
  }

  if (delta_y_sign)
  {
    int16_t doublebyte = pp->bytes[2] | BIT(8);
    //left-shift para colocar o sign bit no bit 15, dividir por 128 (2^7) para recuparar o valor mantendo o sinal
    pp->delta_y = (int16_t)(doublebyte << 7) / 128;
  }
  else
  {
    pp->delta_y = pp->bytes[2];
  }
}

int(is_IBF_set)()
{
  int n_tries = 5;
  uint8_t st;

  while (n_tries > 0)
  {
    if (util_sys_inb(STAT_REG, &st))
    {
      return 1;
    }
    if ((st & IBF) != 0)
    { //Check if IBF is set
      tickdelay(micros_to_ticks(DELAY_US));
    }
    else
    {
      return 0;
    }
    --n_tries;
  }

  return 1;
}

int(is_OBF_set)()
{
  int n_tries = 5;
  uint8_t st;

  while (n_tries > 0)
  {
    if (util_sys_inb(STAT_REG, &st))
    {
      return 1;
    }
    if ((st & OBF) == 0)
    { //Check if OBF is set
      tickdelay(micros_to_ticks(DELAY_US));
    }
    else
    {
      return 0;
    }
    --n_tries;
  }

  return 1;
}

uint8_t(mouse_enable_data_rpt)()
{
  uint8_t ack;

  if (is_IBF_set())
  {
    return 1;
  }
  sys_outb(IN_BUF_KBC_CMD, WRITE_MOUSE_CMD);
  if (is_IBF_set())
  {
    return 1;
  }
  sys_outb(IN_BUF_CMD_BYTE, ENABLE_DATA_RPT);
  if (is_OBF_set())
  {
    return 1;
  }
  if (util_sys_inb(OUT_BUF, &ack))
  { //read acknowledgment
    return 1;
  }

  return ack;
}

uint8_t(mouse_disable_data_rpt)()
{
  uint8_t ack;

  if (is_IBF_set())
  {
    return 1;
  }
  sys_outb(IN_BUF_KBC_CMD, WRITE_MOUSE_CMD);
  if (is_IBF_set())
  {
    return 1;
  }
  sys_outb(IN_BUF_CMD_BYTE, DISABLE_DATA_RPT);
  if (is_OBF_set())
  {
    return 1;
  }
  if (util_sys_inb(OUT_BUF, &ack))
  { //read acknowledgment
    return 1;
  }

  return ack;
}

/**
uint8_t(mouse_set_remote_mode)() {
  uint8_t ack;

  if (is_IBF_set()) {
    return 1;
  }
  sys_outb(IN_BUF_KBC_CMD, WRITE_MOUSE_CMD);
  if (is_IBF_set()) {
    return 1;
  }
  sys_outb(IN_BUF_CMD_BYTE, DISABLE_DATA_RPT);
  if (is_IBF_set()) {
    return 1;
  }
  sys_outb(IN_BUF_CMD_BYTE, SET_REMOTE_MODE);
  if (is_OBF_set()) {
    return 1;
  }
  if (util_sys_inb(OUT_BUF, &ack)) { //read acknowledgment
    return 1;
  }

  return ack;
}
*/

uint8_t(mouse_set_stream_mode)()
{
  uint8_t ack;

  if (is_IBF_set())
  {
    return 1;
  }
  sys_outb(IN_BUF_KBC_CMD, WRITE_MOUSE_CMD);
  if (is_IBF_set())
  {
    return 1;
  }
  sys_outb(IN_BUF_CMD_BYTE, SET_STREAM_MODE);
  if (is_OBF_set())
  {
    return 1;
  }
  if (util_sys_inb(OUT_BUF, &ack))
  { //read acknowledgment
    return 1;
  }

  return ack;
}

uint8_t(mouse_read_data)()
{
  uint8_t ack;

  if (is_IBF_set())
  {
    return 1;
  }
  sys_outb(IN_BUF_KBC_CMD, WRITE_MOUSE_CMD);
  if (is_IBF_set())
  {
    return 1;
  }
  sys_outb(IN_BUF_CMD_BYTE, READ_DATA);
  if (is_OBF_set())
  {
    return 1;
  }
  if (util_sys_inb(OUT_BUF, &ack))
  { //read acknowledgment
    return 1;
  }

  uint8_t st;
  while (size < 3)
  {
    do
    {
      util_sys_inb(STAT_REG, &st);
      tickdelay(micros_to_ticks(DELAY_US));
    } while ((st & (AUX | OBF)) != (BIT(5) | BIT(0)));

    if (util_sys_inb(OUT_BUF, &pp.bytes[size]))
    {
      return 1;
    }
    if ((pp.bytes[0] & BIT(3)) == BIT(3))
    {
      ++size;
    }
  }

  return ack;
}

int delta_x, delta_y;

int(update_gesture_state)(struct packet pp, int logicalAndState, uint8_t x_len, uint8_t tolerance)
{
  switch (logicalAndState)
  {
  case INITIAL_STATE:
    if (pp.lb == 1 && pp.rb == 0 && pp.mb == 0)
    {
      delta_x = 0;
      delta_y = 0;
      return LB_PRESSED;
    }
    return INITIAL_STATE;
    break;
  case LB_PRESSED:
    if (pp.lb == 0 && pp.rb == 0 && pp.mb == 0)
    {
      if (delta_x < 0 || delta_y < 0)
      {
        return INITIAL_STATE;
      }
      if (((double)delta_y / (double)delta_x) <= 1.0 || delta_x < x_len)
      {
        return INITIAL_STATE;
      }
      delta_x = 0;
      delta_y = 0;
      return FIRST_LINE_DRAWN;
    }

    if (pp.lb == 1 && pp.rb == 0 && pp.mb == 0)
    {
      if (logicalAndState == LB_PRESSED)
      {
        delta_x += pp.delta_x;
        delta_y += pp.delta_y;
      }
      if (pp.delta_x < 0)
      {
        if (abs(pp.delta_x) > tolerance)
        {
          return INITIAL_STATE;
        }
      }
      if (pp.delta_y < 0)
      {
        if (abs(pp.delta_y) > tolerance)
        {
          return INITIAL_STATE;
        }
      }
      return LB_PRESSED;
    }

    return INITIAL_STATE;
    break;
  case FIRST_LINE_DRAWN:
    if (pp.lb == 0 && pp.rb == 0 && pp.mb == 0)
    {
      delta_x += pp.delta_x;
      delta_y += pp.delta_y;

      if (abs(delta_x) > tolerance || abs(delta_y) > tolerance)
      {
        return INITIAL_STATE;
      }
    }

    if (pp.lb == 0 && pp.rb == 1 && pp.mb == 0)
    {
      delta_x = 0;
      delta_y = 0;
      return RB_PRESSED;
    }
    return INITIAL_STATE;
    break;
  case RB_PRESSED:

    if (pp.lb == 0 && pp.rb == 0 && pp.mb == 0)
    {
      if (delta_x < 0 || delta_y > 0)
      {
        return INITIAL_STATE;
      }
      if (((double)delta_y / (double)delta_x) >= -1.0 || delta_x < x_len)
      {
        return INITIAL_STATE;
      }
      delta_x = 0;
      delta_y = 0;
      return FINAL_STATE;
    }

    if (pp.lb == 0 && pp.rb == 1 && pp.mb == 0)
    {
      if (logicalAndState == RB_PRESSED)
      {
        delta_x += pp.delta_x;
        delta_y += pp.delta_y;
      }
      if (pp.delta_x < 0)
      {
        if (abs(pp.delta_x) > tolerance)
        {
          return INITIAL_STATE;
        }
      }
      if (pp.delta_y > 0)
      {
        if (abs(pp.delta_y) > tolerance)
        {
          return INITIAL_STATE;
        }
      }
      return RB_PRESSED;
    }

    return INITIAL_STATE;
    break;
  case FINAL_STATE:
    break;
  }
  return 0;
}
