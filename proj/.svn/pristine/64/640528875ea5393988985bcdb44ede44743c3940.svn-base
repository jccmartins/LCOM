#include "graphics.h"

#include "mouse.h"
#include "snake.h"

#include "../res/0.xpm"
#include "../res/1.xpm"
#include "../res/2.xpm"
#include "../res/3.xpm"
#include "../res/4.xpm"
#include "../res/5.xpm"
#include "../res/6.xpm"
#include "../res/7.xpm"
#include "../res/8.xpm"
#include "../res/9.xpm"
#include "../res/apple.xpm"
#include "../res/mouse-pointer.xpm"
#include "../res/score.xpm"
#include "../res/trophy.xpm"

static void *video_mem, *aux_video_mem;
static uint16_t xRes, yRes;
static uint8_t bitsPerPixel;
static uint8_t memoryModel;
static uint8_t redMaskSize, greenMaskSize, blueMaskSize;
static uint8_t redFieldPosition, greenFieldPosition, blueFieldPosition;

int(set_VBE_mode)(uint16_t mode) {

  //Allocate lowest 1MB of memory
  mmap_t mmap;
  lm_alloc(BIT(20), &mmap);

  //Get Mode Info
  vbe_mode_info_t vmi_p;
  vbe_get_mode_info(mode, &vmi_p);

  lm_free(&mmap);

  xRes = vmi_p.XResolution;
  yRes = vmi_p.YResolution;
  bitsPerPixel = vmi_p.BitsPerPixel;
  memoryModel = vmi_p.MemoryModel;
  redMaskSize = vmi_p.RedMaskSize;
  greenMaskSize = vmi_p.GreenMaskSize;
  blueMaskSize = vmi_p.BlueMaskSize;
  redFieldPosition = vmi_p.RedFieldPosition;
  greenFieldPosition = vmi_p.GreenFieldPosition;
  blueFieldPosition = vmi_p.BlueFieldPosition;

  // Allow memory mapping
  int r;
  struct minix_mem_range mr; /*physical memory range*/
  unsigned int vram_base;    /*VRAM’s physical addresss*/
  unsigned int vram_size;    /*VRAM’s size, but you can usethe frame-buffer size, instead*/

  vram_base = vmi_p.PhysBasePtr;
  vram_size = vmi_p.XResolution * vmi_p.YResolution * ((vmi_p.BitsPerPixel + 7) / 8);

  aux_video_mem = malloc(vram_size);

  mr.mr_base = (phys_bytes) vram_base;
  mr.mr_limit = mr.mr_base + vram_size;

  if (OK != (r = sys_privctl(SELF, SYS_PRIV_ADD_MEM, &mr))) {
    panic("sys_privctl (ADD_MEM) failed: %d\n", r);
  }

  /* Map memory */
  video_mem = vm_map_phys(SELF, (void *) mr.mr_base, vram_size);
  if (video_mem == MAP_FAILED)
    panic("couldn't map video memory");

  // Set VBE Mode
  struct reg86 reg86;

  memset(&reg86, 0, sizeof(reg86));

  reg86.ax = 0x4F02;
  reg86.bx = 1 << 14 | mode; //Bit 14 = 1 - Use linear/flat frame buffer model
  reg86.intno = 0x10;
  if (sys_int86(&reg86) != OK) {
    printf("set_VBE_mode: sys_int86() failed \n");
    return -1;
  }

  return reg86.ax;
}

int(vg_draw_pixel)(bool vramDirectly, int x, int y, uint32_t color) {

  if (x < xRes && y < yRes) {
    uint8_t *address = NULL;

    if (vramDirectly == true) {
      address = (uint8_t *) video_mem + (y * xRes + x) * ((bitsPerPixel + 7) / 8);
    }
    else {
      address = (uint8_t *) aux_video_mem + (y * xRes + x) * ((bitsPerPixel + 7) / 8);
    }

    for (size_t i = 0; i < ((bitsPerPixel + 7) / 8); i++) {
      *address = color >> (i * 8);
      ++address;
    }
  }

  return 0;
}

int(vg_draw_hline)(uint16_t x, uint16_t y, uint16_t len, uint32_t color) {

  for (size_t xPos = 0; xPos < len; xPos++) {
    vg_draw_pixel(false, xPos + x, y, color);
  }

  return 0;
}

int(vg_draw_rectangle)(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint32_t color) {

  for (size_t i = 0; i < height; i++) {
    vg_draw_hline(x, y + i, width, color);
  }

  return 0;
}

int(vg_draw_pattern)(uint8_t no_rectangles, uint32_t first, uint8_t step) {

  uint16_t width = xRes / no_rectangles;
  uint16_t height = yRes / no_rectangles;
  uint16_t x = 0;
  uint16_t y = 0;
  uint32_t color;

  for (int i = 0; i < no_rectangles; i++) {
    for (int j = 0; j < no_rectangles; j++) {
      if (memoryModel == 0x04) { //0x04 - packed pixel/indexed color
        color = (first + (i * no_rectangles + j) * step) % (1 << bitsPerPixel);
      }
      else if (memoryModel == 0x06) { //0x06 - direct color
        uint8_t bFirst = first;
        uint8_t gFirst = first >> blueMaskSize;
        uint8_t rFirst = first >> (greenMaskSize + blueMaskSize);
        uint8_t r = (rFirst + j * step) % (1 << redMaskSize);
        uint8_t g = (gFirst + i * step) % (1 << greenMaskSize);
        uint8_t b = (bFirst + (j + i) * step) % (1 << blueMaskSize);
        color = (r << redFieldPosition) + (g << greenFieldPosition) + (b << blueFieldPosition);
      }
      vg_draw_rectangle(x, y, width, height, color);
      x += width;
    }
    x = 0;
    y += height;
  }

  return 0;
}

int(display_xpm)(bool vramDirectly, xpm_map_t xpm, uint16_t x, uint16_t y) {
  enum xpm_image_type type = XPM_8_8_8;
  xpm_image_t img;
  uint8_t *sprite = xpm_load(xpm, type, &img);

  if (sprite == NULL) {
    printf("ERROR: sprite NULL\n  ");
    return 1;
  }

  uint32_t color;

  for (size_t j = 0; j < img.height; j++) {
    for (size_t i = 0; i < img.width; i++) {
      if (memoryModel == 0x04) { //0x04 - packed pixel/indexed color
        color = *sprite;
      }
      else if (memoryModel == 0x06) { //0x06 - direct color
        uint8_t b = *sprite % (1 << blueMaskSize);
        ++sprite;
        uint8_t g = *sprite % (1 << greenMaskSize);
        ++sprite;
        uint8_t r = *sprite % (1 << redMaskSize);
        color = (r << redFieldPosition) + (g << greenFieldPosition) + (b << blueFieldPosition);
      }
      if (color != 0x00b140) {
        vg_draw_pixel(vramDirectly, x + i, y + j, color);
      }
      ++sprite;
    }
  }

  return 0;
}

void(double_buffer_xpm)(xpm_map_t xpm, uint16_t x, uint16_t y) {
  aux_video_mem = memcpy(aux_video_mem, video_mem, xRes * yRes * ((bitsPerPixel + 7) / 8));
  memset(aux_video_mem, 0, xRes * yRes * ((bitsPerPixel + 7) / 8));
  display_xpm(false, xpm, x, y);
  video_mem = memcpy(video_mem, aux_video_mem, xRes * yRes * ((bitsPerPixel + 7) / 8));
}

/**
 * ------------------------------------------------SNAKE----------------------------------------------------
 */

uint16_t(get_xRes)() {
  return xRes;
}

uint16_t(get_yRes)() {
  return yRes;
}

//snake.c
extern uint16_t pixels_per_unit;
extern struct Snake *snake;
extern struct Apple *apple;

//mouse.c
extern struct Mouse *mouse;

/**
 * Draws map of the game
 */
void(draw_map)() {
  for (int i = 0; i < xRes / pixels_per_unit; i++) {
    for (int j = 0; j < yRes / pixels_per_unit; j++) {
      if ((i + j) % 2 == 0) {
        vg_draw_rectangle(i * pixels_per_unit, j * pixels_per_unit, pixels_per_unit, pixels_per_unit, 0x80be2c);
      }
      else {
        vg_draw_rectangle(i * pixels_per_unit, j * pixels_per_unit, pixels_per_unit, pixels_per_unit, 0x639435);
      }
    }
  }
}

/**
 * Draws snake in the map
 */
void(draw_snake)() {

  struct Node *node = snake->head;

  while (node != NULL) {
    vg_draw_rectangle(node->x * pixels_per_unit, node->y * pixels_per_unit, pixels_per_unit, pixels_per_unit, 0x0000ff);
    node = node->next;
  }
}

/**
 * Draws mouse pointer
 */
void(draw_mouse)() {
  display_xpm(false, mouse_pointer_xpm, mouse->x, mouse->y);
}

/**
 * Draws apple on the screen if it exists
 */
void(draw_apple)() {
  if (apple != NULL) {
    display_xpm(false, apple_xpm, apple->x * pixels_per_unit, apple->y * pixels_per_unit);
    // vg_draw_rectangle(apple->x * pixels_per_unit, apple->y * pixels_per_unit, pixels_per_unit, pixels_per_unit, 0xff0000);
  }
}

/**
 * Draws score on the board
 */
void(draw_score)() {
  int score = snake->score;
  int digit;

  int xPos = get_xRes() - 20;
  int y = 5;

  int n_digits = 0;

  /**
   * trophy.xpm width is 22px, 
   * 3*20 is the space needed for 3 digits for the value of the score, 
   * 10 is a a little space to separate this xpm from the actual score
   */
  int trophy_xPos = get_xRes() - 22 - 3 * 20 - 10;

  display_xpm(false, trophy_xpm, trophy_xPos, y);

  if (score == 0) {
    display_xpm(false, zero_xpm, xPos, y);
  }
  else {
    while (score > 0) {

      ++n_digits;
      xPos = get_xRes() - 20 * n_digits;

      digit = score % 10;

      switch (digit) {
        case 0:
          display_xpm(false, zero_xpm, xPos, y);
          break;
        case 1:
          display_xpm(false, one_xpm, xPos, y);
          break;
        case 2:
          display_xpm(false, two_xpm, xPos, y);
          break;
        case 3:
          display_xpm(false, three_xpm, xPos, y);
          break;
        case 4:
          display_xpm(false, four_xpm, xPos, y);
          break;
        case 5:
          display_xpm(false, five_xpm, xPos, y);
          break;
        case 6:
          display_xpm(false, six_xpm, xPos, y);
          break;
        case 7:
          display_xpm(false, seven_xpm, xPos, y);
          break;
        case 8:
          display_xpm(false, eight_xpm, xPos, y);
          break;
        case 9:
          display_xpm(false, nine_xpm, xPos, y);
          break;
      }

      score = score / 10;
    }
  }
}

/**
 * Draws the game scene with double buffer
 */
void(draw_scene)() {
  aux_video_mem = memcpy(aux_video_mem, video_mem, xRes * yRes * ((bitsPerPixel + 7) / 8));
  memset(aux_video_mem, 0, xRes * yRes * ((bitsPerPixel + 7) / 8));
  draw_map();
  draw_snake();
  draw_apple();
  draw_score();
  draw_mouse();
  video_mem = memcpy(video_mem, aux_video_mem, xRes * yRes * ((bitsPerPixel + 7) / 8));
}
